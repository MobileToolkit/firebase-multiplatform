plugins {
    id 'com.android.library'

    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id 'org.jetbrains.kotlin.android.extensions'
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName '1.0.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        lintConfig file('lint.xml')
//        htmlReport true
//        htmlOutput file('lint-report.html')
        abortOnError true
        warningsAsErrors true
    }
}

androidExtensions {
    experimental = true
}

group 'org.mobiletoolkit'
version '1.0.0'

apply plugin: 'maven-publish'

dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

ext {
    iosFrameworkName = 'MobileToolkitFirestore'
}

kotlin {
    android('android')

    targets {
        final def iosTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') ? presets.iosArm64 : presets.iosX64

        fromPreset(iosTarget, 'ios') {
            binaries {
                framework("${iosFrameworkName}") {
//                    embedBitcode 'disable'
//                    embedBitcode 'marker' // for debug builds
//                    embedBitcode 'bitcode' // for release builds
                    isStatic = true
                }
            }
            compilations.main {
                cinterops {
                    firestore {
                        packageName 'com.google.firebase.firestore'
                        includeDirs "${rootProject.iosCinteropsPath}/FirebaseFirestore.framework/Headers"
                    }
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
//                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinSerializationVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                api 'com.google.firebase:firebase-firestore:20.1.0'
//                api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
//                api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinSerializationVersion"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
//                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinCoroutinesVersion"
                api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinSerializationVersion"
            }
        }
        iosTest {
        }
    }
}

task packForXcode {
    final File frameworkDir = new File(rootProject.buildDir, 'xcode-frameworks')
    final String buildType = project.findProperty('XCODE_CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    def keyFrameworkPrefix = "${iosFrameworkName}${buildType.toLowerCase().capitalize()}"
    dependsOn "link${keyFrameworkPrefix}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework("${iosFrameworkName}", buildType).outputFile

        copy {
            from srcFile.parent
            into frameworkDir
        }
    }
}

tasks.build.dependsOn packForXcode

cinteropFirestoreIos.dependsOn rootProject.tasks.carthageBuild