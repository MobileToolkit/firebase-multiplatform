plugins {
    id 'kotlin-multiplatform' version '1.3.31'
    id 'kotlinx-serialization' version '1.3.31'
    id 'org.jetbrains.kotlin.android.extensions' version '1.3.31'
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName '1.0.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        lintConfig file('lint.xml')
//        htmlReport true
//        htmlOutput file('lint-report.html')
        abortOnError true
        warningsAsErrors true
    }
}

androidExtensions {
    experimental = true
}

group 'org.mobiletoolkit'
version '1.0.0'

apply plugin: 'maven-publish'

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.3.31'
}

//configurations {
//    compileClasspath
//}

ext {
    iosFrameworkName = 'MobileToolkitFirestore'
}

kotlin {
    android('android')

    targets {
        final def iosTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') ? presets.iosArm64 : presets.iosX64

        fromPreset(iosTarget, 'ios') {
            binaries {
                framework("${iosFrameworkName}") {
                    embedBitcode('disable')
                    linkerOpts '-rpath', '@executable_path/Frameworks'
                    linkerOpts "-F${rootProject.iosCinteropsPath}"
                    linkerOpts '-framework SystemConfiguration'
                    linkerOpts '-lz'
                    linkerOpts '-framework nanopb'
                    linkerOpts '-framework FirebaseCore'
                    linkerOpts '-framework GoogleUtilities'
                }
            }
            compilations.main {
                cinterops {
                    firestore {
                        packageName 'com.google.firebase.firestore'
                        defFile = file("${rootProject.defsPath}/FirebaseFirestore.def")
                        linkerOpts "-F${rootProject.iosCinteropsPath}"
                        includeDirs "${rootProject.iosCinteropsPath}/FirebaseFirestore.framework/Headers"
                    }
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
//                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0'
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
//            configurations {
//                compile.exclude group: 'org.jetbrains.kotlinx', module: 'atomicfu-common'
//                compile.exclude group: 'org.jetbrains.kotlinx', module: 'kotlinx-coroutines-core'
//            }

            dependencies {
                implementation kotlin('stdlib')
                api 'com.google.firebase:firebase-firestore:19.0.1'
//                api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'
//                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0'
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
//                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.2.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.11.0'
            }
        }
        iosTest {
        }
    }
}

task packForXcode {
    final File frameworkDir = new File(rootProject.buildDir, 'xcode-frameworks')
    final String buildType = project.findProperty('XCODE_CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    def keyFrameworkPrefix = "${iosFrameworkName}${buildType.toLowerCase().capitalize()}"
    dependsOn "link${keyFrameworkPrefix}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework("${iosFrameworkName}", buildType).outputFile

        copy {
            from srcFile.parent
            into frameworkDir
        }
    }
}

tasks.build.dependsOn packForXcode

cinteropFirestoreIos.dependsOn rootProject.tasks.carthageBuild