plugins {
    id 'kotlin-multiplatform' version '1.3.31'
    id 'kotlinx-serialization' version '1.3.31'
    id 'org.jetbrains.kotlin.android.extensions' version '1.3.31'
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.mobiletoolkit.firebase.exampleapp'
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    packagingOptions {
//        pickFirst 'META-INF/kotlinx-io.kotlin_module'
//        pickFirst 'META-INF/atomicfu.kotlin_module'
//        pickFirst 'META-INF/kotlinx-coroutines-core.kotlin_module'
//    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

ext {
    iosFrameworkName = 'ExampleAppShared'
}

kotlin {
    android('android')

    targets {
        final def iosTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') ? presets.iosArm64 : presets.iosX64

        fromPreset(iosTarget, 'ios') {
            binaries {
                framework("${iosFrameworkName}") {
                    embedBitcode('disable')
                    linkerOpts '-rpath', '@executable_path/Frameworks'
                    linkerOpts "-F${rootProject.iosCinteropsPath}"
//                    linkerOpts '-framework Foundation'
//                    linkerOpts '-framework MobileCoreServices'
//                    linkerOpts '-framework StoreKit'
                    linkerOpts '-framework SystemConfiguration'
                    linkerOpts '-lz'
//                    linkerOpts '-lsqlite3'
                    linkerOpts '-framework nanopb'
                    linkerOpts '-framework FirebaseCore'
                    linkerOpts '-framework GoogleUtilities'
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation project(':firestore')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation project(':firestore')
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation project(':firestore')
            }
        }
        iosTest {
        }
    }
}

task packForXcode {
    final File frameworkDir = new File(rootProject.buildDir, 'xcode-frameworks')
    final String buildType = project.findProperty('XCODE_CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    def keyFrameworkPrefix = "${iosFrameworkName}${buildType.toLowerCase().capitalize()}"
    dependsOn "link${keyFrameworkPrefix}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework("${iosFrameworkName}", buildType).outputFile

        copy {
            from srcFile.parent
            into frameworkDir
        }
    }
}

tasks.build.dependsOn packForXcode

apply plugin: 'com.google.gms.google-services'